#  -------------------------
#      Open Source Project Context 22
#      Autor  : Frederic Petit 
#      with a BIG help from :  https://docs.sparkflows.io/en/latest/rest-api-python/python-token.html
# 
#      Execute a Guardium RestAPI on a report
#  -------------------------


#!/usr/bin/python

import requests

import json

import getpass

token_url = "https://sdcpiapplnx096:8443/oauth/token"

processor_count_api_url = "https://sdcpiapplnx096:8443/restAPI/online_report" # Running a Guardium Report




#Step A - resource owner supplies credentials
#Resource owner (enduser) credentials

RO_user = 'admin'  # A GUI user with proper roles (admin is in general used)
RO_password = '@@@@@@'  # Its password

#client (application) credentials
client_id = '@@@@@'  # Client id (name ) you created when generating the secrte in CLI
client_secret = '@@@@@@@@@@@@@@@@@'  # The Secret generated by cli

#step B, C - single call with resource owner credentials in the body and client credentials as the basic auth header will return #access_token

data = {'grant_type': 'password','username': RO_user, 'password': RO_password}

access_token_response = requests.post(token_url, data=data, verify=False, allow_redirects=False, auth=(client_id, client_secret))

print(access_token_response.headers)
print(access_token_response.text)

tokens = json.loads(access_token_response.text)
print( "access token: " + tokens['access_token'])

# Step C - now we can use the access_token to make as many calls as we want.
api_call_headers = {
'Content-Type':'application/json',
'Authorization': 'Bearer ' + tokens['access_token']}

print( api_call_headers)

# The parameters of your report
# Adapt as necessary
# Note : It is VERY important to respect the format, because it worked around what seems to be a bug - Also respect the names and order of parameters you see in the GUI
dataReport="{'reportName':'Traffic Verification','indexFrom':'1','reportParameter': {'QUERY_FROM_DATE':'START OF LAST DAY','QUERY_TO_DATE':'NOW','ServerIP':'%','SenderIP':'%','ServerType':'%','SHOW_ALIASES':'TRUE','REMOTE_SOURCE':'%'}}"

api_call_response = requests.post(processor_count_api_url, headers=api_call_headers, verify=False, data=dataReport)

print(api_call_response.text)
